library ieee;
use ieee.std_logic_1164.all;

entity EMIFx_Interface is

	port(
			EMxCLK			: 	in std_logic							:= '0';								--EMIFx Clock
			EMxADDR			: 	in std_logic_vector(11 downto 0)	:= (others => '0');				--EMIFx Address		
			nEMxCS2			:	in std_logic							:= '0';								--EMIFx Chip Selection2
			nEMxCS3			: 	in std_logic							:= '0';								--EMIFx Chip Selection3
			nEMxCS4			:	in std_logic							:= '0'								--EMIFx Chip Selection4	
			
			
	);

end EMIFx_Interface;

architecture arch of EMIFx_Interface is

	signal PC_EN			: std_logic								:= '0';						-- Program Counter Enable
	signal PC_CNT			: integer range 0 to 88				:= 0;							-- Program Counter 
	signal EMxAddrRaw		: std_logic_vector(24 downto 0) 	:= (others => '0');		-- Reconstructed EMIFx Address
	signal EMXAddrLth		: std_logic_vector(24 downto 0) 	:= (others => '0');		-- Latched Address

begin

	-- Program Counter Enable
	PC_EN <= not(nEMxCS2 and nEMxCS3 and nEMxCS4);
	
	-- EMIFx Address Generator(Reconstructing the Address from TMS320F28377D EMIF1 nCS2, nCS3 and nCS4)
	-- nCS2 : 0x0010 0000 - 002F FFFF
	-- nCS3 : 0x0030 0000 - 0037 FFFF
	-- nCS4 : 0x0038 0000 - 003D FFFF
	EMxAddrRaw(23 downto 22) 	<= (others => '0');
	EMxAddrRaw(21) 				<= nEMxCS3 nand nEMxCS4;
	EMxAddrRaw(20) 				<= PC_EN;
	EMxAddrRaw(19)					<= not(nEMxCS4);
	EMxAddrRaw(18 downto 12)   <= (others => '0');
	EMxAddrRaw(11 downto 0)		<= EMxADDR;
	
	-- Program Counter and Latch Address
	Program_Counter : Process (PC_EN, EMxCLK)
	begin
		if PC_EN = '0' then
			EMxAddrLth	<= x"000000";
			PC_CNT		<= 0;
		elsif falling_edge(EMxCLK) then
			if PC_CNT = PC_CNT_LATCH then
				EMxAddrLth <= EMxAddrRaw;
			end if;
			PC_CNT = PC_CNT + 1;
		end if
	end process Program_Counter;

	-- EMIFx Address Decoder
	
	
	
	
end arch; 